namespace Project;
public class pe027 : IGet
{
        private const int _aLimit = 999;
        private const int _bLimit = 1000;

        private static Dictionary<long, bool> isPrime = new Dictionary<long, bool>();

        public void Get()
        {
            //lower boundry
            int _lowerLimitA = _aLimit * (-1);
            int _lowerLimitB = _bLimit * (-1);
            int a = _lowerLimitA;
            int b = _lowerLimitB;

            long numOfPrimes = -1;

            for(int i = _lowerLimitA; i <= _aLimit; i++)
            {
                for(int j = _lowerLimitB; j <= _bLimit; j++)
                {
                    var currentResult = CountPrimesOnFormula(i, j);
                    
                    if(numOfPrimes < currentResult)
                    {
                        a = i;
                        b = j;
                        numOfPrimes = currentResult;
                    }
                }
            }

            Console.WriteLine($"The result is {a*b}, for a = {a}, b = {b} with a total of {numOfPrimes} prime numbers generated by the given formula");
        }

        private static long CountPrimesOnFormula(int a, int b)
        {
            long count = 0;
            long n = 0;

            var result = Formula(a, b, n);
            while(IsPrime(result))
            {
                count++;
                n++;
                result = Formula(a, b, n);
            }
            return count;
        }
        private static long Formula(int a, int b, long n) => (n*n + a*n + b);
                
        //Crivo de Erast√≥stenes - Project Euler 7 
        public static bool IsPrime(long n)
        {
            if(isPrime.ContainsKey(n))
                return isPrime[n];

            if(n < 0)
            {
                isPrime[n] = false;
                return false;
            }
            if (n == 3 || n == 2)
            {
                isPrime[n] = true;
                return true;
            }
            if (n % 2 == 0 || n % 3 == 0)
            {
                isPrime[n] = false;
                return false;
            }
            if (n < 9)
            {
                isPrime[n] = true;
                return true;
            }
            double limit = Math.Sqrt(n);
            for (int i = 5; i <= limit; i += 6)
            { 
                if (n % i == 0)
                { 
                    isPrime[n] = false;
                    return false;
                }
                if (n % (i + 2) == 0) 
                {
                    isPrime[n] = false;
                    return false;
                }
            }
            isPrime[n] = true;
            return true;
        }
    
}
    